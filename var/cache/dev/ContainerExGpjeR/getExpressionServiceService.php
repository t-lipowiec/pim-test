<?php

namespace ContainerExGpjeR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getExpressionServiceService extends App_KernelDevDebugContainer
{
    /**
     * Gets the public 'Pimcore\Workflow\ExpressionService' shared autowired service.
     *
     * @return \Pimcore\Workflow\ExpressionService
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/pimcore/pimcore/lib/Workflow/ExpressionService.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-core/Authorization/ExpressionLanguage.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/workflow/EventListener/ExpressionLanguage.php';

        $a = ($container->privates['debug.security.access.decision_manager'] ?? self::getDebug_Security_Access_DecisionManagerService($container));

        if (isset($container->services['Pimcore\\Workflow\\ExpressionService'])) {
            return $container->services['Pimcore\\Workflow\\ExpressionService'];
        }
        $b = ($container->privates['security.token_storage'] ?? self::getSecurity_TokenStorageService($container));

        return $container->services['Pimcore\\Workflow\\ExpressionService'] = new \Pimcore\Workflow\ExpressionService(new \Symfony\Component\Workflow\EventListener\ExpressionLanguage(($container->services['cache.app'] ?? self::getCache_AppService($container))), $b, new \Symfony\Component\Security\Core\Authorization\AuthorizationChecker($b, $a, false), ($container->privates['scheb_two_factor.security.authentication.trust_resolver'] ?? self::getSchebTwoFactor_Security_Authentication_TrustResolverService($container)), ($container->privates['security.role_hierarchy'] ?? self::getSecurity_RoleHierarchyService($container)), ($container->privates['debug.validator'] ?? self::getDebug_ValidatorService($container)));
    }
}
