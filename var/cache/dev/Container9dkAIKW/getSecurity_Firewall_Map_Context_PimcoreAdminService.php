<?php

namespace Container9dkAIKW;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSecurity_Firewall_Map_Context_PimcoreAdminService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'security.firewall.map.context.pimcore_admin' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-bundle/Security/FirewallContext.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Util/TargetPathTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Firewall/ExceptionListener.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Firewall/LogoutListener.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-bundle/Security/FirewallConfig.php';

        $a = ($container->privates['security.authenticator.form_login.pimcore_admin'] ?? $container->load('getSecurity_Authenticator_FormLogin_PimcoreAdminService'));

        if (isset($container->privates['security.firewall.map.context.pimcore_admin'])) {
            return $container->privates['security.firewall.map.context.pimcore_admin'];
        }
        $b = ($container->privates['debug.security.event_dispatcher.pimcore_admin'] ?? self::getDebug_Security_EventDispatcher_PimcoreAdminService($container));

        if (isset($container->privates['security.firewall.map.context.pimcore_admin'])) {
            return $container->privates['security.firewall.map.context.pimcore_admin'];
        }
        $c = ($container->privates['security.token_storage'] ?? self::getSecurity_TokenStorageService($container));
        $d = ($container->privates['security.http_utils'] ?? self::getSecurity_HttpUtilsService($container));

        return $container->privates['security.firewall.map.context.pimcore_admin'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['security.channel_listener'] ?? $container->load('getSecurity_ChannelListenerService'));
            yield 1 => ($container->privates['security.context_listener.1'] ?? self::getSecurity_ContextListener_1Service($container));
            yield 2 => ($container->privates['debug.security.firewall.authenticator.pimcore_admin'] ?? $container->load('getDebug_Security_Firewall_Authenticator_PimcoreAdminService'));
            yield 3 => ($container->privates['security.authentication.access_listener.two_factor.pimcore_admin'] ?? $container->load('getSecurity_Authentication_AccessListener_TwoFactor_PimcoreAdminService'));
            yield 4 => ($container->privates['security.access_listener'] ?? $container->load('getSecurity_AccessListenerService'));
        }, 5), new \Symfony\Component\Security\Http\Firewall\ExceptionListener($c, ($container->privates['scheb_two_factor.security.authentication.trust_resolver'] ?? self::getSchebTwoFactor_Security_Authentication_TrustResolverService($container)), $d, 'pimcore_admin', $a, NULL, NULL, ($container->services['monolog.logger.security'] ?? self::getMonolog_Logger_SecurityService($container)), false), new \Symfony\Component\Security\Http\Firewall\LogoutListener($c, $d, $b, ['csrf_parameter' => '_csrf_token', 'csrf_token_id' => 'logout', 'logout_path' => 'pimcore_admin_logout']), new \Symfony\Bundle\SecurityBundle\Security\FirewallConfig('pimcore_admin', 'Pimcore\\Security\\User\\UserChecker', '.security.request_matcher.kzdFSNc', true, false, 'Pimcore\\Security\\User\\UserProvider', 'pimcore_admin', 'security.authenticator.form_login.pimcore_admin', NULL, NULL, ['login_throttling', 'two_factor', 'form_login', 'Pimcore\\Bundle\\AdminBundle\\Security\\Authenticator\\AdminTokenAuthenticator'], NULL, ['path' => 'pimcore_admin_logout', 'target' => 'pimcore_admin_login', 'enable_csrf' => NULL, 'csrf_token_id' => 'logout', 'csrf_parameter' => '_csrf_token', 'invalidate_session' => true, 'clear_site_data' => [], 'delete_cookies' => []]));
    }
}
