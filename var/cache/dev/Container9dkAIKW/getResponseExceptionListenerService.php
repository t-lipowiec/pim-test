<?php

namespace Container9dkAIKW;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getResponseExceptionListenerService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'Pimcore\Bundle\CoreBundle\EventListener\ResponseExceptionListener' shared autowired service.
     *
     * @return \Pimcore\Bundle\CoreBundle\EventListener\ResponseExceptionListener
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/pimcore/pimcore/bundles/CoreBundle/src/EventListener/ResponseExceptionListener.php';

        $a = ($container->services['Pimcore\\Document\\Renderer\\DocumentRenderer'] ?? self::getDocumentRendererService($container));

        if (isset($container->privates['Pimcore\\Bundle\\CoreBundle\\EventListener\\ResponseExceptionListener'])) {
            return $container->privates['Pimcore\\Bundle\\CoreBundle\\EventListener\\ResponseExceptionListener'];
        }
        $b = ($container->services['doctrine.dbal.default_connection'] ?? self::getDoctrine_Dbal_DefaultConnectionService($container));

        if (isset($container->privates['Pimcore\\Bundle\\CoreBundle\\EventListener\\ResponseExceptionListener'])) {
            return $container->privates['Pimcore\\Bundle\\CoreBundle\\EventListener\\ResponseExceptionListener'];
        }
        $c = ($container->services['Pimcore\\SystemSettingsConfig'] ?? $container->load('getSystemSettingsConfigService'));

        if (isset($container->privates['Pimcore\\Bundle\\CoreBundle\\EventListener\\ResponseExceptionListener'])) {
            return $container->privates['Pimcore\\Bundle\\CoreBundle\\EventListener\\ResponseExceptionListener'];
        }

        $container->privates['Pimcore\\Bundle\\CoreBundle\\EventListener\\ResponseExceptionListener'] = $instance = new \Pimcore\Bundle\CoreBundle\EventListener\ResponseExceptionListener($a, $b, $c, ($container->services['Pimcore\\Model\\Document\\Service'] ??= new \Pimcore\Model\Document\Service()), ($container->services['Pimcore\\Http\\Request\\Resolver\\SiteResolver'] ?? self::getSiteResolverService($container)));

        $instance->setLogger(($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)));
        $instance->setPimcoreContextResolver(($container->services['Pimcore\\Http\\Request\\Resolver\\PimcoreContextResolver'] ?? self::getPimcoreContextResolverService($container)));

        return $instance;
    }
}
